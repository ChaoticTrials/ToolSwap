import net.minecraftforge.gradle.common.util.ModConfig
import net.minecraftforge.gradle.common.util.RunConfig
import org.apache.maven.artifact.versioning.ComparableVersion

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.apache.maven', name: 'maven-artifact', version: '3.6.3+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/secrets.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/markdown-git-changelog.gradle'

loadSecrets()
group = "de.melanx"
archivesBaseName = "ToolSwap-${mc_version}"
version = getVersion(group, archivesBaseName, mod_version)

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings("official", mappings_version)

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    createRunConfig("client")
    createRunConfig("server")
    createRunConfig("data", { RunConfig run ->
        run.args "--mod", modid, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources")
    })
}

def createRunConfig(String name, Closure extra = {}) {
    minecraft.runs.create(name) { RunConfig run ->
        run.workingDirectory project.file("run_" + name)
        run.property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
        run.property "forge.logging.console.level", "debug"
        run.mods.create(modid) { ModConfig mod ->
            source sourceSets.main
        }
    }.with(extra)
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.0'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : "MelanX",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "MelanX",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

private static String getVersion(String group, String artifact, String baseVersion) {
    java.nio.file.Path mavenPath = Paths.get('/var/www/maven').resolve(group.replace('.', '/')).resolve(artifact)
    if (!Files.isDirectory(mavenPath)) {
        return "${baseVersion}.0"
    }
    return "${baseVersion}." + Files.walk(mavenPath)
            .filter { path -> Files.isRegularFile(path) && path.getFileName().toString().endsWith('.pom') }
            .map { path ->
                String fileName = path.getFileName().toString()
                fileName.substring(fileName.indexOf('-', artifact.size()) + 1, fileName.length() - 4)
            }.filter { version -> version.startsWith(baseVersion) }
            .max { s1, s2 -> new ComparableVersion(s1).compareTo(new ComparableVersion(s2)) }
            .map { ver -> ver.substring(ver.findLastIndexOf { str -> !"0123456789".contains(str) } + 1) }
            .map { ver -> ver.isEmpty() ? "-1" : ver }
            .map { ver -> (ver.toInteger() + 1).toString() }
            .orElse("0")
}

curseforge {
    apiKey = findProperty('curse_auth') ?: 0
    def versions = "${curse_versions}".split(', ')
    project {
        id = "${curse_project}"
        releaseType = 'release'
        changelog = getGitChangelog()
        println(changelog)
        changelogType = 'markdown'

        versions.each {
            addGameVersion "${it}"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version
            artifact jar
        }
    }

    repositories {
        maven {
            url "/var/www/maven"
        }
    }
}